	.xlist
;----------------------------Module-Header------------------------------;
; Module Name: PATTERN.BLT
;
; Subroutine for pattern preprocessing.
;
; Created: In Windows' distant past (c. 1983)
;
; Copyright (c) 1983 - 1987  Microsoft Corporation
;
; Labels used but not defined here:
;	None
;
; This file is part of a set that makes up the Windows BitBLT function
; at driver-level.
;-----------------------------------------------------------------------;
	.list


	.xlist
ifdef	PUBDEFS
	public	pattern_preprocessing
ifdef	GEN_COLOR_BLT
	public	pattern_preproc_color
	public	pattern_preproc_mono
endif
	public	pattern_preproc_end
	public	pattern_preproc_error
endif
	.list

;----------------------------Private-Routine----------------------------;
; pattern_preprocessing
;
; If a pattern is needed, make sure that it isn't a hollow
; brush. If it is a hollow brush, then return an error.
;
; The type of brush to use will be set, and the brush pointer
; updated to point to the mono bits if the mono brush will be
; used.  The type of brush used will match the destination device.
;
; If the destination is mono and the source is color, then a mono
; brush fetch will be used, with the color brush munged in advance
; according to the background/foreground colors passed:
;
;     All brush pixels which match the background color should be set
;     to white (1).  All other brush pixels should be set to black (0).
;
;     If the physical color is stored as all 1's or 0's for each
;     plane, then by XORing the physical color for a plane with the
;     corresponding byte in the brush, and ORing the results, this
;     will give 0's where the color matched, and  1's where the colors
;     didn't match.  Inverting this result will then give 1's where
;     the brush matched the background color and 0's where it did not.
;
; If both the source and destination are color, or the source is mono
; and the destination color, then the color portion of the brush will
; be used.
;
; If both the source and destination are mono, then the monochrome
; portion of the brush will be used.
;
; Entry:
;	BH = gl_the_flags
; Returns:
;	Carry flag clear if no error
; Error Returns:
;	Carry flag set if error (null lpPBrush, or hollow brush)
; Registers Preserved:
;	BH,BP
; Registers Destroyed:
;	AX,BL,CX,DX,SI,DI,DS,ES,flags
; Calls:
;	None
; History:
;  Sun 22-Feb-1987 16:29:09 -by-  **** ***** [*****]
; Created.
;-----------------------------------------------------------------------;

;------------------------------Pseudo-Code------------------------------;
; {
; }
;-----------------------------------------------------------------------;


	assume	ds:nothing
	assume	es:nothing

pattern_preprocessing	proc	near

	mov	gl_the_flags,bh		;Save flag values
	test	bh,F0_PAT_PRESENT	;Pattern required?
	jz	pattern_preproc_end	;  No, skip pattern check

	lds	si,lpPBrush		;--> physical brush
	mov	ax,ds
	or	ax,si
	jz	pattern_preproc_error	;Null pointer, error

	cmp	oem_brush_style[si],BS_HOLLOW
	je	pattern_preproc_error	;Hollow brush.	Abort with an error

	mov	al,oem_brush_accel[si]	;Save EGA brush accelerator
	mov	cl_brush_accel,al

ifdef	GEN_COLOR_BLT
	shl	bh,1			;What type of pattern fetch?
	js	pattern_preproc_end	;Color pattern Fetch.  OK as is
	jnc	pattern_preproc_mono	;Not going color ==> mono, OK as is
	errnz	F0_COLOR_PAT-01000000b
	errnz	F0_GAG_CHOKE-10000000b


;	This is a color ==> mono BLT.  The color brush must be processed
;	against the background and foreground colors as stated above,
;	giving a pseudo monochrome brush.
;
;	This new brush will be stored on the frame and the brush pointer
;	biased to point to it.

; ??	handle four planes in here

	les	di,lpDrawMode		;Get background color
	mov	dx,wptr es:bkColor[di]	;DL = red, DH = green
	mov	bl,es:bkColor.pcol_C2[di] ;BL = blue
	.errnz	pcol_C0
	.errnz	pcol_C1 - pcol_C0 - 1
	mov	ax,ss
	mov	es,ax
	lea	di,cl_a_brush		;ES:DI --> temp brush area
	mov	cx,SIZE_PATTERN		;Set loop count

pattern_preproc_color:
	lodsb				;Get red plane
	mov	ah,oem_brush_C1-1[si]	;Get green plane
	xor	ax,dx			;Set matching bits to 0
	or	ah,al
	mov	al,oem_brush_C2-1[si]	;Process blue plane
	xor	al,bl
	or	al,ah			;Combine red and green
	not	al			;Do final inversion
	stosb				;  and store the byte
	loop	pattern_preproc_color

	mov	seg_lpPBrush,es 	;Set segment of brush
	lea	si,-oem_brush_style[di]	;Set up for offsetting mono brush

pattern_preproc_mono:
endif	;GEN_COLOR_BLT
	add	si,oem_brush_mono	;--> mono portion of the brush
	mov	off_lpPBrush,si

pattern_preproc_end:
	clc
	ret

pattern_preproc_error:
	stc
	ret

pattern_preprocessing	endp

