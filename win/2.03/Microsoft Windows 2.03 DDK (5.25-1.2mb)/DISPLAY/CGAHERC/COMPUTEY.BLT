	.xlist
;----------------------------Module-Header------------------------------;
; Module Name: COMPUTEY.BLT
;
; Subroutine to compute Y-related parameters of BLT.
;
; Created: In Windows' distant past (c. 1983)
;
; Copyright (c) 1983 - 1987  Microsoft Corporation
;
; This file is part of a set that makes up the Windows BitBLT function
; at driver-level.
;-----------------------------------------------------------------------;
	.list


	.xlist
ifdef	PUBDEFS
	public	compute_y
	public	compute_y_100
	public	compute_y_120
	public	compute_y_160
	public	compute_y_180
	public	compute_y_200
	public	compute_y_240
	public	compute_y_260
endif
	.list


ifdef	HERCULES
	externA	HERCULES_DEFINED
endif

ifdef	IBM_CGA
	externA	IBM_CGA_DEFINED
endif

	externW	interlace_adjust
	externA	Y_SHIFT_COUNT
	externA	EVEN_SCAN_INC
	externA	ODD_SCAN_INC


;----------------------------Private-Routine----------------------------;
; compute_y
;
; Compute y-related parameters.
;
; The parameters related to the Y coordinate and BLT direction
; are computed.  The parameters include:
;
;	a) Index to next scan line
;
;	b) Starting Y address calculation
;
;	c) Huge bitmap update parameters
;
;		1) overflow conditional jump opcode
;
;		2) overflow address range
;
;		3) bmFillBytes correct value
;
;		4) bmSegmentIndex correct value
;
; Entry:
;	BP --> DEV structure to use (src or dest)
;	AX  =  Y coordinate
;	CX  =  BLT direction
;	       0000 = Y+
;	       FFFF = Y-
;	BX  =  inclusive Y extent
; Returns:
;	CX  =  BLT direction
;	BX  =  inclusive count
; Registers Preserved:
;	BP,DS,ES
; Registers Destroyed:
;	AX,DX,SI,DI,flags
; Calls:
;	None
; History:
;  Sun 22-Feb-1987 16:29:09 -by-  **** ***** [*****]
; Created.
;-----------------------------------------------------------------------;

;------------------------------Pseudo-Code------------------------------;
; {
; }
;-----------------------------------------------------------------------;

compute_y	proc near

	mov	si,seg_index[bp] 	;Is this a huge bitmap?
	or	si,si
	jne	compute_y_100		;  Yes, lots of special processing



;	This is either a small bitmap or the display.  Compute the
;	Y address and update lp_bits.  Then compute and save the
;	increment to the next scan line.

	test	dev_flags[bp],IS_DEVICE
	jnz	compute_y_is_device


	mov	si,width_b[bp]		;Need bmWidthBytes a couple of times
	mul	si				;Compute Y address
	add	word ptr lp_bits[bp][0],ax	;  and add it into lp_bits
	xor	si,cx				; 1's complement if Y-
	sub	si,cx				; 2's complement if Y-
	mov	next_scan[bp],si
;****** -- shouldn't next_scan_xor be set to 0 here?
;	mov	next_scan_xor[bp],0
	jmp	compute_y_exit

compute_y_is_device:
	push	bx			;y extent not used here, but save it
	mov	bx,ax			;save copy of y coord

	mov	si,width_b[bp]		;Need bmWidthBytes a couple of times

	mov	di,ax
	and	di,00000011b
	add	di,di
	mov	di,interlace_adjust[di]
	add	wptr lp_bits[bp][0],di

	mov	dx,cx			;save cx
	mov	cl,Y_SHIFT_COUNT
	shr	ax,cl
	mov	cx,dx			;restore BLT direction

	mul	si				;Compute Y address
	add	word ptr lp_bits[bp][0],ax	;  and add it into lp_bits

;	Prepare increment to next interlaced scan line.
	mov	ax,EVEN_SCAN_INC
	xor	ax,cx			;1's complement if Y-
	sub	ax,cx			;2's complement if Y-

ifdef	HERCULES
;	Prepare increment to use in case of interlace wrap around.
	xor	si,cx			;1's complement if Y-
	sub	si,cx			;2's complement if Y-
	add	si,8000h
endif	;HERCULES

ifdef	IBM_CGA
;	Prepare mask for toggling scan increment value
	mov	si,ODD_SCAN_INC
	xor	si,cx
	sub	si,cx

	or	cx,cx
	jz	compute_y_moving_up

	xchg	ax,si			;if moving down in mem, switch 'em

compute_y_moving_up:
	shr	bx,1
	jnc	compute_y_cga_start_is_even

	xchg	ax,si			;starting scan is odd, flip

compute_y_cga_start_is_even:
	xor	si,ax
endif	;IBM_CGA

	mov	next_scan[bp],ax 	;set index to next scan line
	mov	next_scan_xor[bp],si	;set interlace wraparound adjustment
	pop	bx

compute_y_exit:
	ret				;All done with device, small bitmaps



	subttl	Y Computations For Huge Bitmaps
	page

;	This is a huge bitmap.	Compute which segment the Y coordinate
;	is in, and update the lp_bits pointer to that segment.  This will
;	be done iteratively since it is expected that only two or three
;	segments will ever be involved, so it will be faster in most
;	cases.



compute_y_100:
;	mov	si,seg_index[bp] 	;Get segment index
	mov	di,scans_seg[bp] 	;Get number of scans per segment
	xor	dx,dx			;Sum segments here

compute_y_120:
	add	dx,si			;Compute bias to next segment selector
	sub	ax,di			;See if Y is within this 64K
	jae	compute_y_120		;Y isn't in the 64K, try next
	sub	dx,si			;Added one index too many
	add	wptr lp_bits[bp][2],dx	;Update selector



;	The selector has been updated if needed.  Now see if the BLT
;	will span a segment boundary.  If it will span a segment boundary,
;	then set the SPANS_SEG flag.  Optimizations can be made if the BLT
;	doesn't cross a segment boundary.
;
;	AX is currently the Y offset within a segment minus the number of
;	scans in a segment, so it must be negative.
;
;	Currently:
;		AX = offset within segment - # scans per segment.
;		DI - # scans per segment
;		CX = BLT direction
;		BX = inclusive Y extent


	mov	si,ax			;Need a copy of Y
	jcxz	compute_y_160		;This is a Y+ BLT


;	Y- BLT
;
;	SI is the Y offset within the segment minus the number of scans
;	in the segment (it is negative).  Add in the number of scans,
;	then subtract the inclusive extent.  If the result stays positive,
;	then the result fits within the segment, else it spans more than
;	one segment.
;
;	Also take the 2's complement of both the bmSegmentIndex and the
;	bmFillBytes values.  This will allow the Y update code to always
;	generate adds.	Also save the conditional jump opcode for the
;	scan line update generation.


	mov	comp_test[bp],LOW I_JC_P12H
	neg	fill_bytes[bp]		;Set 2's complement for >64K
	neg	seg_index[bp]		;  huge update generation
	add	si,di			;Get Y offset within segment
	sub	si,bx			;Subtract inclusive Y extent
	jns	compute_y_200		;BLT fits within one segment
	jmp	short compute_y_180	;BLT spans a segment boundary




;	Y+ BLT
;
;	SI is the Y offset within the segment minus the number of scans
;	in the segment (it is negative).  Add in the inclusive extent.
;	If the result is still negative, then the BLT is contained
;	within the segment, else it spans more than one segment.
;
;	Also save the conditional jump opcode for the scan line update
;	generation.


compute_y_160:
	mov	comp_test[bp],LOW I_JNC_P12H
	add	si,bx			;Is last scan line in another segment?
	js	compute_y_200		;  No, BLT will fit in the segment

compute_y_180:
	or	dev_flags[bp],SPANS_SEG	;Show source spans a segment



;	The correct segment and the SPANS_SEG flag have been computed.
;	Compute the Y address and update lp_bits.


compute_y_200:
	add	ax,di			;Get Y offset within segment
	mov	si,width_b[bp]		;Need bmWidthBytes a couple of times
	mul	si			;Compute Y address
	add	wptr lp_bits[bp][0],ax	;  and add it into lp_bits



;	Compute and save the increment to the next scan line.  This
;	increment will be:
;
;		+/- bmWidthBytes
;
;
;
;	Also compute the address range used to test for overflow.
;	This value will be  (bmFillBytes + bmWidthBytes)  for Y+ BLTS.
;	For Y- BLTs, it will be  -(planes * bmWidthBytes).


	mov	dx,si			;Set DX = Y+ range check value
	add	dx,fill_bytes[bp]	;  of bmFillBytes + bmWidthBytes
	mov	di,si			;Set DI = Y- mono range check
	neg	di
	mov	plane_w[bp],si		;Plane width will always be scan width
	xor	si,cx			;Conditionally negate increment
	sub	si,cx

compute_y_240:
	mov	next_scan[bp],si 	;Save update to next scan
	jcxz	compute_y_260		;Y+, DX has range check value
	mov	dx,di

compute_y_260:
	mov	comp_value[bp],dx	;Save range check value
;	ret				;All done
	jmp	compute_y_exit

compute_y	endp
