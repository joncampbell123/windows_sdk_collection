#   Window's Sample Display Drivers.
#
#       This MAKE file will make the CGA and Hercules monchrome
#       display drivers.  Since they differ only in a few source files
#       they will be built in the same directory.  CGA and Hercules
#       device OEMs should base their drivers on these sources.    
#       NOTE: Do not call this MAKE file directly.  Rather, use the
#       MAKECGA.BAT and MAKEHERC.BAT files to build the desired driver.
#       These .BAT files pass a special definition to this MAKE file to
#       define the proper driver to build.
#       If you wish to build BOTH the CGA and Hercules sample drivers, you
#       should follow this procedure:
#
#                       1) Build the CGA driver using MAKECGA.BAT.
#                       2) Delete *.OBJ.
#                       3) Build the Hercules driver using MAKEHERC.BAT.
#
#       This procedure must be followed because MAKE will not rebuild the
#       necesary .OBJs if a current version of them exists.
#
#   Build Notes on .RES files:
#       As documented in the OEM Adaptation Guide, you should build the
#       Resource files in the \RESOURCE\CGA if you wish to build the
#       CGA driver.  If you wish to build the Hercules driver, build the
#       resource file in \RESOURCE\HERCULES.  The Resource files should then
#       be copied to the driver build directory BEFORE attempting to build
#       the driver.
#
#   Requirements:
#
#       MASM 5.00 or greater with the environment variable INCLUDE set to
#       the directories containing CMACROS.INC, GDIDEFS.INC, and WINDEFS.INC.
#
#


#   Options:
#
#	The command line may define options to MASM by defining the OPT
#	macro.	By defining the OPT parameter in the make file, any
#       possible interaction with an environment definition is avoided.
#       For the CGA and Hercules, a definition used by the build is
#       passed in from the respective batch file.

    OPT = -D$(version)


#   Define the default assemble command.  This command could actually
#   be overridden from the command line, but shouldn't be.

    ASM = masm -z-t-n-b63 $(OPT)



#   Define the default inference rules.  These rules apply whenever the
# object file depends only on the source file.  If there are other 
# dependencies (such as other include files), then you must repeat the
# inference rule within the dependencies area (for example, see BITBLT).

    .asm.obj:
	$(ASM) $**,$@;


#   Define the dependencies

inquire.obj:	inquire.asm

setmode.obj:	setmode.asm

enable.obj:	enable.asm

disable.obj:	disable.asm

chkstk.obj:	chkstk.asm

cursors.obj:	cursors.asm

control.obj:	control.asm

fb.obj: 	fb.asm

charwdth.obj:   charwdth.asm

hidither.obj:   hidither.asm

sswitch.obj:    sswitch.asm

robject.obj:	robject.asm

enum.obj:	enum.asm

colorinf.obj:   colorinf.asm

pixel.obj:	pixel.asm

output.obj:	output.asm

scanlr.obj:	scanlr.asm

scanline.obj:	scanline.asm

init.obj:	init.asm

cblt.obj:       cblt.asm            \
                genlocal.blt        \
                genconst.blt        \
                ropdefs.blt         \
                clrlocal.blt        \
                clrconst.blt        \
                devlocal.blt        \
                devconst.blt        \
                devdata.blt
		$(ASM) $*;

bitblt.obj:     bitblt.asm              \
                genlocal.blt            \
                genconst.blt            \
                gendata.blt             \
                ropdefs.blt             \
                roptable.blt            \
                clrlocal.blt            \
                clrconst.blt            \
                clrdata.blt             \
                pdevice.blt             \
                pattern.blt             \
                copydev.blt             \
                devlocal.blt            \
                devconst.blt            \
                computey.blt            \
                special.blt             \
                exit.blt                \
                cursor.inc
        $(ASM) $*,$@;

polyline.obj:	polyline.asm polyline.inc plylocal.inc
		$(ASM) $*;

polybitm.obj:	polybitm.asm polyline.inc plylocal.inc polyline.mac
		$(ASM) $*;

polystyl.obj:	polystyl.asm polyline.inc plylocal.inc polyline.mac
                $(ASM) $*;

strblt.obj:     strblt.asm   strblt.inc
                $(ASM) $*;

buildstr.obj:   buildstr.asm strblt.inc
		$(ASM) $*;

smartfix.obj:   smartfix.asm strblt.inc
		$(ASM) $*;

smartpro.obj:   smartpro.asm strblt.inc
                $(ASM) $*;

cursor.obj:     cursor.asm cursor.inc
                $(ASM) $*;

$(drvrname).obj:        $(drvrname).asm
                $(ASM) $**;

3xswicga.obj:   3xswicga.asm
                $(ASM) $**;

3xswherc.obj:   3xswherc.asm
                $(ASM) $**;

$(drvrname).drv: $(drvrname).def $(drvrname).lnk $(drvrname).res  \
                $(drvrname).obj cursor.obj                      \
                bitblt.obj cblt.obj                             \
                polyline.obj polybitm.obj                       \
                polystyl.obj strblt.obj                         \
                buildstr.obj smartpro.obj                       \
                smartfix.obj 3xswicga.obj                       \
                scanlr.obj pixel.obj                            \
                output.obj scanline.obj                         \
                init.obj 3xswherc.obj                           \
                robject.obj colorinf.obj                        \
                enum.obj                                        \
                control.obj cursors.obj                         \
                inquire.obj setmode.obj                         \
                hidither.obj disable.obj                        \
                enable.obj chkstk.obj                           \
                charwdth.obj fb.obj                             \
                sswitch.obj
        link @$(drvrname).lnk
        rc $(drvrname).res $(drvrname).drv
        copy $(drvrname).map display.map
        mapsym display
        copy display.sym $(drvrname).sym
        del display.map
        del $(drvrname).map
        del display.sym
