
    Let the geometric line run from (0,0) to (dx,dy), therefore the equation
of the line is:
		        x = ys		where s is the inverse of the slope

     We will have to find out the no of pixels to set on on each of the scan
lines y=0,1,2,3,...,dy. Lets consider any arbitrary scan line at abscissa
value y and consider the intersection of the line with the scans at y-1/2 and
consider the small box formed 4 pixels enclosing the point of intersection
			       A
                   ----|------|----  scan of interset (y)
                   ____|______|____  half scan (y-1/2)
		      a|     b|
                   ----|------|----  previous scan line (y-1/2)
		      B1      B2
 
The geometric line can intersect the half scan at any point from a to b. Now
if the line passes exactly between two pixel values, we will choose the lower
one. Let the exact ordinate of the intersection be x. 

Therefore for a<=x<b, the first pixel to set on, on the scan of interest is at
A, if the intersection is at x=b, the first pixel will be the next one to the
right of A. So, the first pixel to set on, on the y scan line will have an
ordinate value:
		 	Xfirst = floor(x) + 1                      (1)

Consider the intersection of the line with the next half scan at y+1/2. If we
continue to go by the above figure, the scan of interest is now the one below
the half scan line. Now the exact ordinate of the intersection will be at 

			x + s

and for cases where the intersection is <b, the pixel to set on on the lower
scan line will be at B1, it will be at B2 if the pixel intersects at b, so the
last pixel to set on the y scan line is

			Xlast = floor(x+s)

so, the number of pixels to set on, on the yth scan line inclusive of the end
ones is
		      Cy  =  Xlast - Xfirst + 1
	          or, Cy  =  floor(x + s) - floor(x)              (2)

let x be represented as x = Xint + f, ie, it has an integer part and a
fractional part, the integer part will cancel out in the floor  calculation
and floor(f) will be zero(as it is a fraction), so

		      Cy  = floor(f+s)				  (3)

now from the equation of the line, we know that the ordinate of the
intersection of the line with the half scan at y-1/2 is at

		       x  = (y - 1/2)s,

so,		       f  = frac[(y - 1/2)s]                      (4)

We have got to the geometric line by doing a series of transformations, now if
the geometric line originally happened to be below the X axis, the in the tie
cases where ever we chopse the lower pixel, for the original line this will
turn out to be the upper pixel for the tie cases. To prevent this
inconsistency we should actully be taking the ceiling value instead of the
floor valuie in case of flipped lines. Similarly the metric of rounding to the
left in case of ties between two horizontal pixel will be convoluted for lines
flipped about the 45 degree line.

The best way would be if we can shift the geometric line for flipped lines by
a small amount to the left so that the tie cases are all biased towards the
upper pixel (and hence the lower pixel for the actual line). But this shift
should not affect the choice of pixels in cases where there was no tie. So by
how much do we shift the line ?

The ties cases occur only when the geometric line intersects our half
scanlines at an integral value of X. Now consider the intersection with y-1/2
line. The point of intersection is at,

			x = (y - 1/2)s
		    or, x = (2ydx - dx)/2dy

If we consider the above equation, we can say that

		        x = m + n/2dy

where m is the integral part of the division and 0<=n<2dy ( the remainder).
Now consider the non tie cases, for all such cases, there is a finite
remainder which could be 1/2dy, or 2/2dy or 3/2dy ....

The idea of shifting was two fold:

		        . for the tie cases shifting the line left would cause
the new intersection at that x value to be above the 1/2 scan line thereby
leting us choose the upper pixel
			. the shifting should be such that an intersection
which originally was to the left of pt a in the above figure ahould at best be
shifted to point a, so that at the abcissa value of a B1 is still selected.

From the above discussion it is evident that shifting by 1/2dy will satisfy
both our objectives. 

Therefore for lines which are flipped about the horizontal axis or about the 45
degree line (but not both, in which case the effect cancels out) we shall
consider a shifted line, shifted left by 1/2dy.

So, now the equation of the line becomes:

			x = ys + f0

where,		        f0 = -1/2dy for flipped lines
		           = 0      otherwise.

Once we agree that the above shifting will enable us to solve the
aforementioned inconsistency, we will continue to use the floor value in tie
cases and the modified equation for Cy will still be the same,
			
			Cy  = floor(fy+s),
but			fy  = frac(ys - s/2 + f0)

Consider the effect of fy on the floor value. s has an integral and a
fractional part too. 
		
		let     s = floor(s) + frac(s)

Now if   fy + frac(s) < 1, then

			Cy = floor(s)
but if fy + frac(s) >= 1
		        Cy = floor(s) + 1

			     { m     if fy' < 0
Therefore,		Cy = { 
			     { m + 1 if fy' >= 0

where,			m   = floor(s)
		       fy'  = fy + frac(s) - 1
                            = frac(ys - s/2 + f0) + frac(s) - 1

The above derivation is for a general scan line, but for the first and last
scan lines at y=0 and y=dy respectively, the calculations would be different
since the line stops at the end points.  

Consider the values of fy' for various values of y.

			f1'   =  frac(s/2 + f0) + frac(s) - 1
                        fn+1' =  frac(s + ns - s/2 + f0) + frac(s) - 1

any integral values pass out

   so,  fn+1' =  frac(frac(s) + frac(ns - s/2 + f0)) + frac(s) - 1
= frac(frac(s) + frac(ns - s/2 + f0) + frac(s) - 1 - frac(s) + 1) + frac(s) -1
	      =  frac(fn' + 1) + frac(s) - 1

fn' is already a fraction, and frac(a fraction) = the fraction.
At this point, if fn' is negative, value of frac(fn' + 1) will be 1 + fn'.
However if it is postive, 1 will pass out of the frac function.

so,	    fn+1'   =  fn' + frac(s) - 1   ----  if fn' positive or zero
               but  =  fn' + frac(s)       ----  if fn' negative

with this equation we could simply calulate f1' and get the others from it by
the above induction.

Now to calculate the run lengths on the first and last slices.
	The first pixel to set on on the y=0 scan line is at x = 0, the last
pixel to set on is at x = floor(f0 + s/2)

	so,	C0 = floor(s/2 + f0) + 1.

Likewise to get the last run, the last pixel on the penultimate scan line is
at		Xlast =  floor(x+s)
so, the first pixel on the last scan line is at
		         floor(x+s) + 1, where x is the intersection of the
line with the line at y = dy-3/2. The last pixel on the last line is at dx

so,		Cdy = dx - floor(s(dy - 3/2) + f0 + s) 
                    = dx - floor(dx - 3s/2 + f0 + s) 
		    = dx - floor(dx - s/2 + f0)

dx being an integer passes out of the floor function,

	so,     Cdy = - floor(fo - s/2)
                    = ceil(s/2 - f0)

This sums up the mathematical calculations and for ready reference we shall
note them down below:

            _______________________________________________________
	          s     =  inverse slope of the line (dx/dy)
                  m     =  floor(s)
                  f0    =  -1/2dy if line is flipped, 0 otherwise
                  
                  C0    =  floor(s/2 + f0) + 1

                  f1'   =  frac(s/2 + f0) + frac(s) - 1

                  fn+1' =  fn' + frac(s) - 1   if fn' >= 0
                        =  fn' + frac(s)       if fn' < 0

		  Cdy   =  ceil(s/2 - f0)
            ________________________________________________________     

		   

Now consider that we have an inclusive clipping interval [xa,xb], such that
0 <= xa <= xb <= dx.

Consider the intersection of the line with the line x=xa. From here we will
have to decide on the height of the first scan line.

	            ______a|_________
                           |         
                    ______b|_________
                           |
			   xa
Suppose the line intersects x=xa between a and b, either y=a or y=b will be
our first scan line depending on where the line cuts and our metric of
rounding down. (note the line has already been shifted for the flipped case)

Withe the equation of the line being y = (x - f0)/s, the first scan line will
therefore be at 

		         ya = ceil((xa - f0)/s + 1/2) - 1

the 1/2 addition, the ceiling and the subtraction ensure that either a or b
whichever is closer to the intersection(a in case of tie) is chosen.

Likewise the last scan line will be at
	
		         yb = ceil((xb - f0)/s + 1/2) - 1


The run length on the first scan is given by

	Ca = floor(ordinate of cut with ya+1/2)  - xa + 1
           = floor(s(ya+1/2) + f0) - xa + 1

likewise,for the last run length,

        Cb = xb - [floor(ordinate of cut with yb - 1/2) + 1] + 1
           = xb - floor(s(yb - 1/2) + f0)
                                            

Now f1 was the fractional part of the ordinate of the intersection with the
first half scan line, which in this case is at ya + 1/2. Therefore

	f1 = frac(s(ya + 1/2) + f0)

so that, f1' = frac(s(ya + 1/2) + f0) + frac(s) - 1

                 __________________________________________
                 ya  = ceil((xa - f0)/s + 1/2) - 1		 (A)
                 yb  = ceil((xb - f0)/s + 1/2) - 1
		 Ca  = floor(s(ya + 1/2) + f0) - xa + 1		 (B)
                 Cb  = xb - floor(s(yb - 1/2) + f0)
   		 f1' = frac(s(ya + 1/2) + f0) + frac(s) - 1	 (C)
                 __________________________________________

Note that the argument of the ceiling function in (A) is a multiple of 1/2dx
In the same manner as done before, we can transform the ceiling function into
a floor function by subtracting 1/2dx from the argument.

	That is , we had
			
        ya = ceil( ordinate of cut + 1/2) - 1

	we could have written

	ya = floor(ordinate of cut + 1/2)
 
but the tie case would have been rounded up. If we subtract 1/2dx fro the
argument of the floor function only the tie point will be biased down and all
others will remain unaffected.

	so,	ya = floor(s(xa - f0) + 1/2 - 1/2dx)
		   = floor(2dy.xa - 2dy.f0 + dx - 1)/2dx

when we do the division above, the quotient will be the y value we are looking
for. We also get a remainder rm which is strictly less than 2dx.

	putting the equation in quotient*divisor + remainder form,

	2dx.ya + rm = 2dy.xa - 2dy.f0 + dx - 1                   (D)

Now consider the common expression s(ya+1/2) + f0, which appears in Ca and f1'

	s(ya + 1/2) + f0  =  (2dx.ya + dx + 2dy.f0)/2dy

expanding 2dx.ya from (D)
			  =  (2dy.xa + 2dx - (rm + 1)) / (2dy)
                          =  xa + s - (rm+1)/2dy

Therefore, floor(s(ya + 1/2) + f0) = floor(xa + s - (rm+1)/2dy)
			           = xa + floor(s - (rm+1)/2dy)

putting this back into	(B) we get,
		
		Ca = floor(s - (rm+1)/2dy) + 1

and hence we get a new set of equations:

	________________________________________________________________
	Divide [2dy.xa - 2dy.f0 + dx - 1] by 2dx
        ya = quotient of the division, rm is the remainder.

        Divide [2dy.xb - 2dy.f0 + dx - 1] by 2dx
        yb = quotient of the division, rm' is the remainder

	Ca     = floor(s - (rm+1)/2dy) + 1  -----  length of first slice
        
        f1'    = frac(s - (rm+1)/2dy) + frac(s) - 1  ---- the first error

        Cy     = m       if fy' <  0
               = m + 1   if fy' >= 0

        fy+1'  = fy' + frac(s) - 1    ---    if fy' >= 0
               = fy' + frac(s)        ---    if fy' <  0

        Cb     = ceil((rm'+1)/2dy)

        We can scale fy' by 2dy which is a positive quantity as we simply 
        use the sign of the term, it will not be affected. So to get the 
        fractions we will actually use the remainder after division by 2dy
__________________________________________________________________________

		        STYLED LINES
		        ------------

  There are 5 types of non-solid line styles. We can represent each style by a
mask pattern as shown below:

	PS_DASH		11100111
        PS_DOT		10101010
        PS_DOTDASH      11100100
        PS_DASHDOTDOT   11101010

 Now on the EGA the aspect ratio is 4:3, that is pixels are taller than they
are wide, if we are thinking of a uniform scale in the X and Y directios.

So it would be okay if we consider that 1 bit in the mask represents 4 pixels
in the X direction but 3 pixels if the line is being drawn in the Y direction
If the line is moving in the diagonal direction, then 1 bit in the mask would
represent 5 pixels.

Our drawing algorithm is as follows:

	. inspect the MSB of the mask, if the bit is 1 draw the pixel else
	  do not.

        . If we have drawn(or left alone) all the pixels assigned to the mask
	  then shift left the mask by 1 bit so that the next bit in the mask
          becomes the active bit(ie, the MSB).

To decide whether we have processed all the bits assigned to a single bit in
the mask, we make use of an error term. Let's say that the error at start is 0
and after processing one pixel corresponding to any bit in the mask we add a
constant, depending on the direction of draw, to the error term. We keep doing
this till the error overflows a byte, in that case the mask has to be rotated.

The constants should be so chosen that the error overflows after 4 additiones
for X and 3 for Y.

Therefore,    DistHoriz	=    256/4   =  64
	      DistVert	=    256/3   =  85

After the overflow we do not reset the error term so that the unequal division
as well as curving around bends can be taken care of(in case of curves
though).

Also each mask has a state which would tell us by how much the mask has
rotated. The state starts at 0 with the patterns as above and with each
rotation the state would be incremented by one, so the state would
actually tell us how many times we have rotated the initial mask
value. For the first line we will use a state value of zero, but for
subsequent lines , the state value at the end of the previous line will be
used.

Now pixels on EGA are taller than they are wide, coordinates which are
supposed to give us a 45 degree line will actually appear on the screen as Y
major, and hence sholud be treated as a Y major line while calculating the
mask and error at the end of the line. However please note that the draw
routine will still use the DistDiag term for this line.

Now the line is going to be drawn as a series of slices in one particular
direction with the slices being separated from one another by a step in
another direction. If we divide the first quadrant into 4 parts, we will get
four cases with the nature of the progress of the slice and the projection on
the X or Y axis as shown below:

Here we assume that the line has been flipped into the 1st one fourth quadrant
by manipulating the end points and now runs from (0,0) to (dx,dy). But since
the actual line can be anywhere in the first quadrant, the terms that we add
to the style error value should take care of the direction of motion of the
actual line.

Case I) 1st one fourth quadrant:
--------------------------------
                     (X,Y) wrt horizontal axis
		     (dx,dy) wrt horizontal axis; dx=X,dy=Y
	        x x x x	 run horizontal,step diagonal
	x x x x
x x x x
. . . . . . . . . . . .   <------ projection on the X axis

If the line is from (0,0) to (dx,dy) then the no of slices will be dy+1, but
on the projection, if dy gaps are because of the side step diagonnaly and
dx-dy gaps are for the step in the direction of the run. Now for each step if
we add  fx for horizontal motion and fd for the diagonal motion, then the
total addition to the error term for the entire length of the run will be

	      z = (dx-dy)*fx + dy*fd
	   or z = (X-Y)*fx + Y*fd

Also note the contribution on the projection because of the disgonal step is
also fx. So we have fd=fx,and
	     z = X*fx and for side steps advance mask by fx

Case II) 2nd one fourth quadrant:
---------------------------------
             (X,Y) wrt to origin
          x  (dx,dy) wrt to the diagonal; dx=X,dy=X-Y
         x
        x
      xx  		run diagonal,step horizontal
     x
    x
  xx
 x
x
...........      <----  projection on the X axis

Here also similar eqaution holds:

	z = (dx-dy)*fd + dy*fx
   so,  z = Y*fd + (X-Y)*fx

As in the previous case the contribution of the run steps is the same as the
contribution of the side step, and thus fd = fx
	z = X*fx and for side steps advance mask by fx
        

Case III) 3rd one fourth quadrant:
----------------------------------
          (X,Y) wrt to origin
          (dx,dy) wrt the diagonal;dx=Y,dy=Y-X.
	x    .	  This is Y major line with runs along diagonal and
       x     .	  steps along vertical, so we take the projection along 
      x	     .	  the vertical direction.
      x	     .
     x	     .
    x	     .
   x	     .
   x	     .
  x	     .
 x	     .
x	     .
      projection along
      Y axis.

 If fy is the error term addition for a step in the vertical direction, then
 we see that,
		z = (dx-dy)*fd + dy*fy
           so,  z = X*fd + (Y-X)*fy
 
 Here, the contribution of the steps along the run direction and along the
step direction ared both fy (ie, fd=fy)
	   so,  z = Y*fy and side steps advance mask by fy

 Note we are talking in terms of the flipped line, so dx is actually the
ordinate value of the end point of the actual line.

Case IV) 4th one fourth quadrant.
---------------------------------
     (X,Y) wrt origin
     (dx,dy) wrt the vertical axis;dx=Y,dy=Y-X.
   x .		   For these Y major lines the run is along the vertical
   x .		   and the step along the diagonal.
   x .
  x  .
  x  .
  x  .
 x   .
 x   .
 x   .
 x   .
    projection along
    Y axis.

Now,           z = (dx-dy)*fy + dy*fd
           so, z = X*fy + (Y-X)*fd

 Here again fd = fy, so we have
	       z = Y*fy with side steps advancing mask by fy

All is well till we consider that the pixels are not actually squares but are
instead taller than they are wide. So, a line from (0,0) to (n,n), though a 
diagonal line, will actually look Y major on the screen. This cant really be
helped, but what we can do is that actually style the line as a Y major line
as that is how it appears on the screen. 

Therefore if a line runs from (0,0) to (dx,dy) and fx and fy are style
increments along the X and Y directions, then a line will be termed Y major if
we have,
                dy*fy > dx*fx

Since fy is > fx for EGA, a line could be termed Y major even when dx > dy!
Also note that this anomaly can only occur in the 2nd one fourth quadrant from
the X axis.

Let's consider on such line in that quadrant which has turned out to be Y major
because of the above reason. As the line will now be considered to be Y major,
we have to take projection on the Y axis.
             (X,Y) wrt origin
             (dx,dy) wrt diagonel, dx=X,dy=(X-Y)
	   x .
	  x  .
	 x   .
       xx    x	    x's mark the places where the break in the run occurs
      x	     .	    but now the break does not account for an extra gap
     x	     .	    on the projection as two points get projected onto one.
   xx	     x
  x	     .
 x	     .
x	     .
        projection 
        along Y axis

 Here we have,
		z = (dx-dy)*fd with no contribution from fx.
            or, z = Y*fd

And since here a step in the diagonal direction, contributes fy on the
projection we have,
		z = Y*fy  but what is important is that now the side
                         steps do not advance the mask at all.

Now, note that to draw the styled lines we actually try to decide which pel on
the relevant projection is to be set & which pel is to be skipped, while we
actually continue to draw along the actual path. 

To summarize the above discussion we can write down the equation for z
depending upon the various cases:

		       z                          contribution of sidestep

Case I                X*fx                                   fx
Case II(Xmajor)       X*fx                                   fx
Case II(Ymajor)       Y*fy                                   0
Case III              Y*fy                                   fy
Case IV               Y*fy                                   fy

To generalize the equation we can write:

	         z = (major - minor) * f1 + minor * f2

where for X major lines, major = X and minor = Y, where as
for normally Y major lines(X<Y) major = Y and minor = X.

       where, for X major lines

		 f1 = f2 = fx = contribution of step step

       for normally Y major lines,

	         f1 = f2 = fy = contribution of side step

       for normally X major, stylistically Y major lines

                 f1 = 0, f2 = fy, contribution of side step = 0

 We will compare X*fx with Y*fy to find out whether the lines are X major or Y
major, if they are Y major but Y<X we have the special case above.

Note that the no of times that z caused the error term to cross 256 will tell
us the no of times we have rotated the mask and hence the new state value.

Therefore, state of mask at end = (state at start + (z+err at start)/256) mod 8

And likewise the error term at the end will be,

     error term = (error term at start + z) mod 256.

The way the above equations work out, it is a distinct advantage to store the
style mask state as the HIBYTE and the error term as the LOBYTE of a word
variable. We also calculate Z as a word variable. Now it is enough that we
simply add word variable to Z to get the new state in the HIBYTE(w/0 mod 8
of course) and error term at end of the line in the LOWBYTE. 


Now say at the end of the line that state as calculated above is s and the
error e. If we are actually starting from the end point in order to ensure
that the line moves from left to right, the initial mask for us should
correspond to what we have calculated for the end of the line, but we are
actually moving in the reverse direction. So the mask that we load should now
be looked from the right end, that is the mask value that we load will have
the lsb of the original mask in the msb position and so on. Also the state
with respect to the reversed mask should be 7-s and the error should be 255-e
So we will have to 'NOT' the state and the error term and load the revers of
the original mask. So now the mask table will actually have two sets of values
for the mask one for styling in the direction of progress of the line and the
other for styling against the direction of progress of the line.

	 _________________MASK VALUE________________
         draw in dir of		     draw in reverse 
             line     		       direction
         ____________________________________________ 

           11100111                    11100111       PS_DASH
           10101010                    01010101       PS_DOT
           11100100                    00100111       PS_DOTDASH
           11101010                    01010111       PS_DASHDOTDOT


Note that we shall use the state of the mask only once before starting to draw
the line and at this point would also calculate the end state of the
mask.While drawing the line we will simply rotate the mask as and when
necessary but not touch the state as we are interested in the state only in
the begining to decide what should be the starting position of the mask.


		     STYLE MASK ROTATION FOR CLIPPING
		     --------------------------------

As we have noted earlier, after clipping the line will actually start from
(Xa,Ya), the initial style mask and style error are actually for the begining
of the line, so we should advance them to correspond to the point (xa,ya). We
can use the equation of z derived above with the same values for f1 and f2 and
add z to the mask state and error value and use the updated state to rotate
the style mask appropriately.

		          LINE TRANSFORMATIONS
                          --------------------

There are three ways in which we can transform the coordinates to get the
pseudo line in the first one fourth quadrant. These transformations are done
after the line has been translated to the origin and the end points
interchanged id necessary to ensure that the line moves from the left to the
right.


		     . Half Flip (to get the line from the second one
                                  fourth quadrant to the first)
                  
	             . X-Y Interchange (to get the line from above the
                                        slope = 1 line to below it)

                      
                     . Vertical Flip (if the other end point happened to be
				      below the X axis)

If we record the transformations we are doing in a flag, reserving the LSB for
the first transformation above, the next bits for the next transformation and
the third bit for the Vertical flip, we get the following relationship between
tha flag value and the run and step directions:

    Flagvalue       type of xformation         run dir          step dir
    ---------       ------------------         -------          --------
       000               None                  Positive X       Diagonal 1Q
       001            Half flip                Diagonal 1Q      Positive X
       010            XY exchange              Positive Y       Diagone 1Q
       011            exchange & 1/2 flip      Diagonal 1Q      Positive Y
       100            vert flip                Positive X       Diagonal 4Q
       101            vert & 1/2 flip          Diagonal 4Q      Positive X
       110            vert flip & xchg         Negative Y       Diagonal 4Q
       111            vert flip,xchg,1/2 flip  Diagonal 4Q      Negative Y

Where Diagonal 4Q refers to a fourth quadrant disgonal and Diagonal 1Q refers
to a first quadrant diagonal.

We shall also refer to the run direction as the draw direction and the step
direction as the move direction. With the above encoding if we have a draw
table and a move table organized in the above fashion, we can use the value of
the flag as an index into the table and retrieve the addresses of the draw and
move routines from there.
  
On the screen, the origin is actually at the top left corner and Y values
increase as we proceed down the screen, where as the picture of the coordinate
axis that we have in our mind has the Y value increasing as we go up. To
confirm to this we will interchange Diagonal 4Q with Diagonal 1Q and Positive
Y with Negative Y in the above table, remebering that Negative Y now means
going down from any point on the screen (which actually is thus going towards
positive Y wrt screen coordinate axes)

       
		     CLIPPING TO RECTANGLES
		     ----------------------

 The drivers clip line segments to a rectangle. We will assume that the
clipping rectangle is inclusive on the bottom left and exclusive on the top
right, to ensure that points that fall on the common boundary of two clipping
rectangles are not drawn twice.

Consider two cases, one where the line is above the X axis and the second case
is where the line is above the X axis.	(The line runs from X to Y)

			. Y
     C	___________________________  D
       |			   |
       |			   |
       |			   |		CASE I
       |			   |
       |			   |
     A |___________________________| B

	 X .

  ______________________________________  X axis


In the first case, the intersection of the line with A-B will be drawn but the
intersection with C-D will be excluded.

In the second case, Breshenhams transformation will require the line and hence
the clipping rectangle to be reflected about the X axis. The effect is as
shown below:

_____________________________________________  X axis
			. Y
     C	___________________________  D
       |			   |
       |			   |
       |			   |		CASE II (original line)
       |			   |
       |			   |
     A |___________________________| B

	 X .


	   . X                    
    A	___________________________  B
       |			   |
       |			   |
       |			   |		CASE II (after reflection)
       |			   |
       |			   |
     C |___________________________| D

	 		. Y
 _________________________________________  X axis


However we should now remember that the intersection with the lower line
( ie CD) is to be excluded but the intersection with the upper line (ie AB) is
to be included.

To avoid having to remember this, and consistently include the intersection
with the lower line and exclude the intersection with the upper line(after any
required X axis reflection), we can shift up the clipping rectangle after the
reflection by 1 scan line.

Assuming that the lower left and upper right corners of the clipping rectangle
are at [X1,Y1] and [X2,Y2] respectively, the clipping algorithm calculates two
clipping intervals.

		. [X1,X2]   ie the clip rectangles left and right margins
                . [Xy1,Xy2] where Xy1 is the intersection of the line with
                            the bottom boundary and Xy2 the intersection with
		            the top boundary.

The more restricting interval will then be selected as the actual clipping
interval.







-------------------------------------------------------------------------------x
-by-  Amit Chatterjee [amitc]   Wed 28-Sep-1988  18:30:40


