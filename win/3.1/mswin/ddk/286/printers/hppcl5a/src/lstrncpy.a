; **********************************************************************
; * lstrncpy.a - 
; *
; * Copyright (C) 1990 Microsoft Corporation.
; * Copyright (C) 1989,1990 Hewlett-Packard Company.
; * All rights reserved.
; * Company confidential.
; *
; *********************************************************************/
;	History
;	02 feb 90	clarkc    Checked it in
; *********************************************************************/

	title	lstrncpy - limited length string copying
	page	60,132

; abstract
;
; this module contains a c-language callable routine for moving a null
; terminated string from one memory location to another up to a maximum
; number of characters.  The intent is to protect both source and
; destination from walking off the end of their segments; the
; source is protected by a NULL terminator, the destination by the
; size passed in the 3rd parameter.

	.xlist
?win=1		;compile with windows epilog/prolog
?plm=1		;we're playing the pascal calling sequence game

	include	cmacros.inc
	.list
	
sBegin	CODE
assumes	CS, CODE


cProc	lstrncpy, <FAR, PUBLIC, NODATA>, <si, di>

parmD	lpDest
parmD	lpSrc
parmW	cbMax

cBegin

  mov	cx, cbMax		; get count
  jcxz	cpy_exit		; 0 -> caller is silly
  push	ds			; save this too
  lds	si, lpSrc		; ptr to src
  les	di, lpDest		; ptr to dest
  dec	cx			; save a byte for the zero
  jz	cpy_outofbytes		; only one? put a null there
  cld				; paranoia
cpy_loop:
  lodsb				; load into al
  stosb				; store it
  or	al, al			; was it a null
  jz	cpy_exit_1		; ... if so, bug out
  loop	cpy_loop		; until we run out of bytes

cpy_outofbytes:
  mov	byte ptr es:[di], 0	; end of buffer, add the NULL

cpy_exit_1:
  pop	ds			; get DS back

cpy_exit:

cEnd

sEnd
end
