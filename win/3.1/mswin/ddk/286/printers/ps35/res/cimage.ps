%---------------------------------------------------------------------------
% cimage.ps 
%
% this file contains the PS routiens the implement the color DIBs
%
% DIBs come in 1, 4, 8, or 24 bit per pixel form.  this code
% handles 4, 8, and 24.
%
% the basic strategy is this:
%	each DIB comes with a color table that is used to map the pixel
%	values to 24 bit (logical) RGBs.  We build a string that represents
%	this table (a palette) and lookup in the table to get the RGB
%	value and send that on to the colorimage operator.  This
%	expands the data out to 24 bits.
%
% things to note:
%	this code does not check to see if colorimage is present thus
%	should not be sent to printers that do not support it.
%
%	this stuff is not very fast.  it does a table lookup on every
%	pixel which in postscript is going to be slow.
%
%	since all data is in ascii you get really big files.  I plan
%	on implementing a simple RLE scheme that should give reasonable
%	compression.  I will replace the readhexstring calls with this.
%
%	in the future it may be possible to do this without using colorimage
%	but using imagemask and using setrgbcolor on each pixel.  this
%	may or may not be faster than the current implementation.
%
% mods:
%	now reads input string with unpack (RLE decompress routine)
%	read4 has been eliminated due to the complexity of non byte
%	alligned pixels when unpacking. 4 bit dibs are converted to 8.
%
% requires:
%	pal	palette of length depending on input bit count
%	rgbstr	length w * 3 (to hold expanded RGB string)
%	bytestr	with length depending on # of bits in input
%	unpack	to perform the RLE decompression
%
%---------------------------------------------------------------------------
%

%
% this is the function used to read 24 bit per pixel DIBs
%
/read24 {currentfile rgbstr readhexstring pop} bd

%
% this is used to read 8 bit DIBs
% bytestr must be the same length as the width
%
/read8 
{
%	currentfile
%	bytestr 
%	readhexstring
	unpack			% try with decompression now
%	pop
	/rgb_ind 0 def
	{
		3 mul		% calc offset into palette
		pal exch	% set the order up right
		3 		% grab 3 bytes
		getinterval	% get the contents of the palette
		rgbstr exch
		rgb_ind	exch	% index into rgbstr
		putinterval	% put them into rgbstr
		/rgb_ind rgb_ind 3 add def	% inc the rgb index by 3
	} forall
	rgbstr			% the rgb expanded string
} bd


%%
%% this is used to read 4 bit DIBs
%%
%% requires bytestr to be defined with length = w/2
%/read4 {
%%	currentfile
%%	bytestr 
%%	readhexstring
%	unpack			% try with decompression now
%%	pop
%	/rgb_ind 0 def
%	{
%		% note: the nyble order may be backwards here
%
%		dup		% make two copies
%		15 and		% keep low nibble
%		3 mul		% calc offset into palette
%		pal exch	% set the order up right
%		3 		% grab 3 bytes
%		getinterval	% get the contents of the palette
%		rgbstr exch
%		rgb_ind	exch	% index into rgbstr
%		putinterval	% put them into rgbstr
%		/rgb_ind rgb_ind 3 add def	% inc the rgb index by 3
%
%		-4 bitshift	% bring high nibble down
%		15 and		% keep low nibble
%		3 mul		% calc offset into palette
%		pal exch	% set the order up right
%		3 		% grab 3 bytes
%		getinterval	% get the contents of the palette
%		rgbstr exch
%		rgb_ind	exch	% index into rgbstr
%		putinterval	% put them into rgbstr
%		/rgb_ind rgb_ind 3 add def	% inc the rgb index by 3
%	} forall
%	rgbstr			% the rgb expanded string
%} bd
%
