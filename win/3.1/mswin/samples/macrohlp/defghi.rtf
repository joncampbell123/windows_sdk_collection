{\rtf1\ansi \deff0{\fonttbl{\f0\froman Tms Rmn;}{\f1\fdecor Symbol;}{\f2\fswiss Helv;}{\f3\fswiss Arial;}{\f4\froman Times New Roman;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;}{\stylesheet{\s244 \f4\fs16\up6 \sbasedon0\snext0 footnote reference;}{\s245 \f4\fs20 \sbasedon0\snext245 footnote text;}{\f4 \snext0 Normal;}}{\info
{\author sdfgsdfg}{\creatim\yr1991\mo10\dy10\min2}{\version1}{\edmins136}{\nofpages0}{\nofwords65536}{\nofchars65536}{\vern8368}}\widowctrl\ftnbj \sectd \linex0\endnhere \pard\plain \keepn \f4 {\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #
} DeleteItem_Topic}!{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 !} EnableButton("Execute_Button");ChangeButtonBinding("Execute_Button","DeleteItem(`Extra_Menu')")}${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} DeleteItem Demonstration}K
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} DeleteItem();AppendItem();Menu}+{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Demos:075}}{\b\f3\fs28  DeleteItem(}{\f3 "Item-Id"}{\b\f3\fs28 )
\par }\pard 
\par This macro removes a menu item added with the {\uldb AppendItem}{\v AppendItem_Topic} macro.
\par 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b\fs28 Parameter\cell Description\cell }\pard \intbl \row \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl Item-Id\cell Item-Id specified in the {\uldb AppendItem}{\v 
AppendItem_Topic} macro.\cell \pard \intbl \row \pard {\fs16\up6 
\par }\trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b Execute Button:\cell }Removes the Extra menu item added with the {\uldb AppendItem}{\v AppendItem_Topic} macro.  If this macro has not yet been executed, then an error message will occur.
\cell \pard \intbl \row \pard \keepn {\fs16\up6 \page #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} DeleteMark_Topic}!{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 !}
 EnableButton("Execute_Button");ChangeButtonBinding("Execute_Button","DeleteMark(`Test_Mark')")}${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} DeleteMark Demonstration}K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} DeleteMark();Mark;SaveMark()
}}{\b\f3\fs28  }{\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Demos:080}}{\b\f3\fs28  DeleteMark(}{\f3 "marker-text"}{\b\f3\fs28 )
\par }\pard 
\par This macro removes a text marker added with the {\uldb SaveMark}{\v SaveMark_Topic} macro.
\par 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b\fs28 Parameter\cell Description\cell }\pard \intbl \row \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl marker-text\cell Marker text specified in the {\uldb SaveMark}{\v 
SaveMark_Topic} macro.\cell \pard \intbl \row \pard 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b Execute Button:\cell }Deletes the marker created by the {\uldb SaveMark}{\v SaveMark_Topic} macro.  If this macro has not yet been executed, then an error message will occur\cell \pard 
\intbl \row \pard \page {\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} DestroyButton_Topic}} {\fs16\up6 !{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 !}
 EnableButton("Execute_Button");ChangeButtonBinding("Execute_Button","DestroyButton(`Test_Button')")}} {\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} DestroyButton Demonstration}} {\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {
\fs16\up6 K} DestroyButton();CreateButton();Button;ChangeButtonBinding()}+{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Demos:085}} {\b\f3\fs28 DestroyButton(}{\f3 "button-id"}{\b\f3\fs28 )
\par }
\par This macro removes a button added with the {\uldb CreateButton}{\v CreateButton_Topic} macro.
\par 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b\fs28 Parameter\cell Description\cell }\pard \intbl \row \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl button-id\cell Identifier assigned to the button in the {\uldb 
CreateButton}{\v CreateButton_Topic} macro. The button ID must appear in quotation marks. The user presses this key with the Alt key to open the menu. The button ID cannot be one of the identifiers for one of the standard Help buttons. (See the {\uldb 
ChangeButtonBinding}{\v ChangeButtonBinding_Topic} macro for a list of these identifiers.)
\par \cell \pard \intbl \row \pard 
\par WinHelp ignores this macro if it is executed in a secondary window.
\par 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b Execute Button:\cell }Destroys the Test button created with the {\uldb CreateButton}{\v CreateButton_Topic} macro.  If this macro has not yet been executed, then an error message will occur
\cell \pard \intbl \row \pard \page {\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} DisableButton_Topic}} {\fs16\up6 !{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 !}
 EnableButton("Execute_Button");ChangeButtonBinding("Execute_Button","DisableButton(`Test_Button')")}} {\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} DisableButton Demonstration}} {\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {
\fs16\up6 K} DisableButton();CreateButton();Button}} {\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Demos:090}} {\b\f3\fs28 DisableButton(}{\f3 "button-id"}{\b\f3\fs28 )
\par }
\par This macro grays out a button added with the {\uldb CreateButton}{\v CreateButton_Topic} macro. 
\par 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b\fs28 Parameter\cell Description\cell }\pard \intbl \row \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl button-id\cell Identifier assigned to the button in the {\uldb 
CreateButton}{\v CreateButton_Topic} macro. The button ID must appear in quotation marks.
\par \cell \pard \intbl \row \pard 
\par WinHelp ignores this macro if it is executed in a secondary window.
\par 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b Execute Button:\cell }Disables the Test button created with the {\uldb CreateButton}{\v CreateButton_Topic}
 macro.  If this macro has not yet been executed, then an error message will occur.\cell \pard \intbl \row \pard \keepn \page {\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} DisableItem_Topic}} {\fs16\up6 !{\footnote \pard\plain \s245 
\f4\fs20 {\fs16\up6 !} EnableButton("Execute_Button");ChangeButtonBinding("Execute_Button","DisableItem(`Extra_Menu')")}} {\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} DisableItem Demonstration}K{\footnote \pard\plain \s245 \f4\fs20 {
\fs16\up6 K} DisableItem();AppendItem();EnableItem();Menu}+{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Demos:100}} {\b\f3\fs28 DisableItem(}{\f3 "item-id"}{\b\f3\fs28 )
\par }\pard 
\par This macro grays out a menu item added with the {\uldb AppendItem}{\v AppendItem_Topic} macro. The menu item cannot be used in the topic until an {\uldb EnableItem}{\v\uldb EnableItem_Topic} macro is executed.
\par 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b\fs28 Parameter\cell Description\cell }\pard \intbl \row \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl item-id\cell Identifier assigned to the menu item in the {\uldb 
AppendItem}{\v AppendItem_Topic} macro. The item ID must appear in quotation marks.\cell \pard \intbl \row \pard 
\par WinHelp ignores this macro if it is executed in a secondary window.
\par 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b Execute Button:\cell }Disables the Extra menu item added by the {\uldb AppendItem}{\v AppendItem_Topic} macro.  If this macro has not yet been executed, then an error message will occur.
\cell \pard \intbl \row \pard \keepn \page {\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} EnableButton_Topic}} {\fs16\up6 !{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 !}
EnableButton("Execute_Button");ChangeButtonBinding("Execute_Button","EnableButton(`Test_Button')") }} {\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} EnableButton Demonstration}} {\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {
\fs16\up6 K} EnableButton();DisableButton();CreateButton();Button}} {\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Demos:105}} {\b\f3\fs28 EnableButton(}{\f3 "button-id"}{\b\f3\fs28 )
\par }\pard 
\par This macro re-enables a button disabled with the {\uldb DisableButton}{\v DisableButton_Topic} macro.
\par 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b\fs28 Parameter\cell Description\cell }\pard \intbl \row \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl button-id\cell Identifier assigned to the button in the {\uldb 
CreateButton}{\v CreateButton_Topic} macro.\cell \pard \intbl \row \pard 
\par WinHelp ignores this macro if it is executed in a secondary window.
\par 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b Execute Button:\cell }Enables the Test button created by the {\uldb CreateButton}{\v CreateButton_Topic} macro.  If this macro has not yet been executed, then an error message will occur.
\cell \pard \intbl \row \pard \keepn \page {\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} EnableItem_Topic}} {\fs16\up6 !{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 !}
 EnableButton("Execute_Button");ChangeButtonBinding("Execute_Button","EnableItem(`Extra_Menu')")}} {\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} EnableItem Demonstration}} {\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K}
 EnableItem();DisableItem();AppendItem();Menu}+{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Demos:110}} {\b\f3\fs28 EnableItem(}{\f3 "item-id"}{\b\f3\fs28 )
\par }\pard 
\par This macro re-enables a menu item disabled with the {\uldb DisableItem}{\v DisableItem_Topic} macro.
\par 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b\fs28 Parameter\cell Description\cell }\pard \intbl \row \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl item-id\cell Identifier assigned to the menu item in the {\uldb 
AppendItem}{\v AppendItem_Topic} macro. The item ID must appear in quotation marks.\cell \pard \intbl \row \pard 
\par WinHelp ignores this macro if it is executed in a secondary window.
\par 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b Execute Button:\cell }Enables the Extra menu item added by the {\uldb AppendItem}{\v AppendItem_Topic} macro.  If this macro has not yet been executed, then an error message will occur.
\cell \pard \intbl \row \pard \keepn \page {\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} ExecProgram_Topic}} {\fs16\up6 !{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 !}
 EnableButton("Execute_Button");ChangeButtonBinding("Execute_Button","ExecProgram(`CLOCK.EXE',2)") }} {\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} ExecProgram Demonstration}K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K}
 ExecProgram();Spawning Applications}+{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Demos:115}} {\b\f3\fs28 ExecProgram(}{\f3 "macro-line", display-state}{\b\f3\fs28 )
\par }\pard 
\par This macro executes a Windows application.
\par 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b\fs28 Parameter\cell Description\cell }\pard \intbl \row \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl macro-line\cell 
Macro line for the application to be executed. WinHelp searches for this application in the current directory, followed by the Windows directory, the user's path, and the directory of the currently viewed Help file.
\par \cell \pard \intbl \row \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl display-state\cell A value indicating how the application is shown when executed. A value of 0 indicates normal, 1 indicates iconized, and 2 indicates maximized.\cell 
\pard \intbl \row \pard 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b Execute Button:\cell }Runs the Clock program that comes with Windows in a maximized state.\cell \pard \intbl \row \pard \keepn \page {\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {
\fs16\up6 #} Exit_Topic}} {\fs16\up6 !{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 !} EnableButton("Execute_Button");ChangeButtonBinding("Execute_Button","Exit()") }${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Exit Demonstration}} {\fs16\up6 K
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} Exit()}} {\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Demos:120}} {\b\f3\fs28 Exit()
\par }\pard 
\par This macro exits the WinHelp application. It has the same effect as selecting Exit from the File menu.
\par 
\par \pard \intbl {\b Execute Button:\cell }Exits Winhelp.\cell \pard \intbl \row \pard \keepn \page {\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} FileOpen_Topic}} {\fs16\up6 !{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 !}
 EnableButton("Execute_Button");ChangeButtonBinding("Execute_Button","FileOpen()")}} {\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} FileOpen Demonstration}} {\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} FileOpen()}} {
\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Demos:125}} {\b\f3\fs28 FileOpen()
\par }\pard 
\par This macro displays the Open dialog box from the File menu.
\par 
\par Use of the macro in secondary windows is discouraged.
\par 
\par \pard \intbl {\b Execute Button:\cell }Brings up the File Open... dialog box\cell \pard \intbl \row \pard \keepn \page {\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} GotoMark_Topic}} {\fs16\up6 !{\footnote \pard\plain \s245 \f4\fs20 {
\fs16\up6 !} EnableButton("Execute_Button");ChangeButtonBinding("Execute_Button","GotoMark(`Test_Mark')")}} {\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} GotoMark Demonstration}K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K}
 GotoMark();SaveMark();Mark}+{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Demos:130}} {\b\f3\fs28 GotoMark(}{\f3 "marker-text"}{\b\f3\fs28 )
\par }\pard 
\par This macro jumps to a marker set with the {\uldb SaveMark}{\v SaveMark_Topic} macro
\par 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b\fs28 Parameter\cell Description\cell }\pard \intbl {\b\fs28 \row }\trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl marker-text\cell Marker text specified in the {\uldb SaveMark
}{\v SaveMark_Topic} macro.\cell \pard \intbl \row \pard 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b Execute Button:\cell }Jumps to the {\uldb SaveMark}{\v SaveMark_Topic} demonstration topic if the {\uldb SaveMark}{\v SaveMark_Topic}
 macro has already been run.  If this macro has not yet been executed, then an error message will occur.\cell \pard \intbl \row \pard \keepn \page {\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} HelpOn_Topic}} {\fs16\up6 !{\footnote 
\pard\plain \s245 \f4\fs20 {\fs16\up6 !} EnableButton("Execute_Button");ChangeButtonBinding("Execute_Button","HelpOn()")}} {\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} HelpOn Demonstration}} {\fs16\up6 K{\footnote \pard\plain \s245 
\f4\fs20 {\fs16\up6 K} HelpOn()}} {\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Demos:135}} {\b\f3\fs28 HelpOn()
\par }\pard 
\par This macro executes the Help on Help macro from the Help menu and displays the Using Help file for the WinHelp application.
\par 
\par \pard \intbl {\b Execute Button:\cell }Brings up the Help on Help file\cell \pard \intbl \row \pard \keepn \page {\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} History_Topic}} {\fs16\up6 !{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 !
} EnableButton("Execute_Button");ChangeButtonBinding("Execute_Button","History()")}} {\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} History Demonstration}+{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Demos:140}} {\b\f3\fs28 
History()
\par }\pard 
\par This macro displays the history list, which shows the last 40 topics the user has viewed since opening a Help file in WinHelp. It has the same effect as choosing the History button.
\par 
\par WinHelp ignores this macro if it is executed in a secondary window.
\par 
\par \pard \intbl {\b Execute Button:\cell }Brings up the History Dialog box.\cell \pard \intbl \row \pard \keepn \page {\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} IfThen_Topic}} {\fs16\up6 !{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 
!} EnableButton("Execute_Button");ChangeButtonBinding("Execute_Button","IfThen(IsMark(`Test_Mark'),`JI(`MACROHLP.HLP',`Mark_Topic')')")}} {\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} IfThen Demonstration}} {\fs16\up6 K{\footnote 
\pard\plain \s245 \f4\fs20 {\fs16\up6 K} IfThen();IsMark();SaveMark();Mark}} {\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Demos:145}} {\b\f3\fs28 IfThen(}{\f3\uldb IsMark}{\v IsMark_Topic}{\f3 ("marker-text"), "macro"}{\b\f3\fs28 )

\par }\pard 
\par This macro executes a Help macro if a given marker exists. It uses the {\uldb IsMark}{\v IsMark_Topic} macro to make the test.
\par 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b\fs28 Parameter\cell Description\cell }\pard \intbl \row \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl marker-text\cell Marker text tested by the {\uldb IsMark}{\v 
IsMark_Topic} macro.
\par \cell \pard \intbl \row \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl macro\cell Help macro or macro string executed if the marker exists. Multiple macros in a macro string must be separated by semicolons.\cell \pard \intbl \row \pard 

\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b Execute Button:\cell }If the {\uldb SaveMark}{\v SaveMark_Topic} macro has been executed, then the "Mark" topic will be displayed.  Otherwise, nothing will happen.\cell \pard \intbl \row 
\pard \page {\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} IfThenElse_Topic}} {\fs16\up6 !{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 !}
 EnableButton("Execute_Button");ChangeButtonBinding("Execute_Button","IfThenElse(IsMark(`Test_Mark'),`JI(`MACROHLP.HLP',`Mark_Topic')',`JI(`MACROHLP.HLP',`NoMark_Topic')')")}} {\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $}
 IfThenElse Demonstration}K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} IfThenElse();IsMark();SaveMark();Mark}+{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Demos:150}} {\b\f3\fs28 IfThenElse(}{\f3\uldb IsMark}{\v IsMark_Topic}{\f3 
("marker-text"), "macro\'971", "macro\'972"}{\b\f3\fs28 )
\par }
\par This macro executes one of two Help macros depending on whether or not a marker exists. It uses the {\uldb IsMark}{\v IsMark_Topic} macro to make the test.
\par 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b\fs28 Parameter\cell Description\cell }\pard \intbl {\b\fs28 \row }\trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl marker-text\cell Marker text tested by the {\uldb IsMark}{\v 
IsMark_Topic} macro.
\par \cell \pard \intbl \row \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl macro\'971, 
\par macro\'972\cell WinHelp executes macro\'971 if the marker exists or macro\'972 if it does not. Multiple macros in either macro string must be separated by emicolons.\cell \pard \intbl \row \pard 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b Execute Button:\cell }If the {\uldb SaveMark}{\v SaveMark_Topic} macro has been executed, then the "Mark" topic will be displayed.  Otherwise, the "No Mark" topic will be displayed.\cell 
\pard \intbl \row \pard \keepn \page {\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} InsertMenu_Topic}} {\fs16\up6 !{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 !}
 EnableButton("Execute_Button");ChangeButtonBinding("Execute_Button","InsertMenu(`Macro_Menu',`&Menu',0)")}${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} InsertMenu Demonstration}K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K}
 InsertMenu();AppendItem()}} {\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Demos:155}} {\b\f3\fs28 InsertMenu(}{\f3 "menu-id", "menu-name", menu-position}{\b\f3\fs28 )
\par }\pard 
\par This macro adds a new menu to the WinHelp menu bar.
\par 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b\fs28 Parameter\cell Description\cell }\pard \intbl \row \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl menu-id\cell 
Name that WinHelp uses internally to identify the menu. The menu ID must appear in quotation marks. Use this identifier in the {\uldb AppendItem}{\v AppendItem_Topic} macro to add macros to the menu.
\par \cell \pard \intbl \row \pard \intbl menu-name\cell Name that WinHelp displays on the menu bar. This name must appear in quotation marks. To make a letter in this text the mnemonic for the menu, place an ampersand (&) before that letter.
\par \cell \pard \intbl \row \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl menu-position\cell 
Number telling WinHelp which position on the menu bar the new menu name will have. Positions are numbered from left to right, with position 0 the left-most menu.
\par \cell \pard \intbl \row \pard 
\par WinHelp ignores this macro if it is executed in a secondary window.
\par 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b Execute Button:\cell }Adds the menu item "Menu" to the first position in the menu bar.  If this menu item already exists, then an error message occurs.\cell \pard \intbl \row \pard \keepn 
\page {\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} IsMark_Topic}} {\fs16\up6 !{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 !}
 EnableButton("Execute_Button");ChangeButtonBinding("Execute_Button","IfThen(IsMark(`Test_Mark'),`JI(`MACROHLP.HLP',`Mark_Topic')')")}} {\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} IsMark Demonstration}K{\footnote \pard\plain \s245 
\f4\fs20 {\fs16\up6 K} IsMark();SaveMark();Mark}+{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Demos:160}} {\b\f3\fs28 IsMark(}{\f3 "marker-text"}{\b\f3\fs28 )
\par }\pard 
\par This macro tests whether or not a marker set by the {\uldb SaveMark}{\v SaveMark_Topic} exists. It is used as a parameter to the conditional macros IfThen and IfThenElse.
\par 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b\fs28 Parameter\cell Description\cell }\pard \intbl {\b\fs28 \row }\trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl marker-text\cell 
Marker text tested by the IsMark macro. The IsMark macro returns a true value if the mark exists or a false value if it does not.\cell \pard \intbl \row \pard 
\par The Not macro can be used to reverse the results of the IsMark macro.
\par 
\par \trowd \trgaph108\trleft-108 \cellx2052\cellx7812\pard \intbl {\b Execute Button:\cell }If the {\uldb SaveMark}{\v SaveMark_Topic} macro has been executed, then the "Mark" topic will be displayed.  Otherwise, nothing will happen.\cell \pard \intbl \row 
\pard 
\par }